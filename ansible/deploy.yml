---
- name: Deploy Microservices to Kubernetes
  hosts: localhost
  become: false

  vars:
    dockerhub_user: "rishika10442"
    k8s_folder: "../k8s"
    services:
      - image_name: catalogue-service
        k8s_name: catalogue-service
      - image_name: user-service
        k8s_name: user-service
      - image_name: order_service
        k8s_name: order-service
      - image_name: borrow_service
        k8s_name: borrow-service
      - image_name: review_serivce
        k8s_name: review-serivce
      - image_name: gateway-service
        k8s_name: gateway-service
#      - image_name: elasticsearch
#        k8s_name: elasticsearch
#      - image_name: logstash
#        k8s_name: logstash
#      - image_name: kibana
#        k8s_name: kibana

  tasks:
    - name: Check if Minikube is running
      shell: minikube status
      register: minikube_status
      ignore_errors: true

    - name: Start Minikube if not running
      shell: minikube start --driver=docker
      when: "'host: Running' not in minikube_status.stdout"

    - name: Pull Docker images from Docker Hub
      shell: docker pull {{ dockerhub_user }}/{{ item.image_name }}:latest
      loop: "{{ services }}"
      register: docker_pull_output
      ignore_errors: yes

    - name: Debug pulled images
      debug:
        msg: "{{ item.stdout }}"
      loop: "{{ docker_pull_output.results }}"

    - name: Deploy MySQL
      shell: kubectl apply -f {{ k8s_folder }}/mysql.yaml

#    - name: Wait for MySQL pod to be ready
#      shell: |
#        kubectl wait --for=condition=ready pod -l app=mysql --timeout=120s
#      register: mysql_wait
#      retries: 3
#      delay: 10
#      until: mysql_wait.rc == 0
#


#    - name: Apply Logstash config map
#      shell: kubectl apply -f {{ k8s_folder }}/logstash-config.yaml
#
#    - name: Deploy Logstash
#      shell: kubectl apply -f {{ k8s_folder }}/logstash.yaml
#
#    - name: Deploy Elasticsearch
#      shell: kubectl apply -f {{ k8s_folder }}/elasticsearch.yaml
#
#    - name: Deploy Kibana
#      shell: kubectl apply -f {{ k8s_folder }}/kibana.yaml

    - name: Apply Filebeat DaemonSet
      shell: kubectl apply -f {{ k8s_folder }}/filebeat.yaml



    - name: Apply Kubernetes YAML manifests per service
      shell: kubectl apply -f {{ k8s_folder }}/{{ item.k8s_name }}.yaml
      loop: "{{ services }}"
      register: kubectl_apply
      failed_when: kubectl_apply.rc != 0 and 'already exists' not in kubectl_apply.stderr

#    - name: Restart user-service deployment to pull new image
#      shell: kubectl rollout restart deployment/user-service



#    - name: Restart deployments to pull new images
#      shell: kubectl rollout restart deployment/{{ item.k8s_name }}
#      loop: "{{ services }}"
#jd